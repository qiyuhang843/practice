#include <iostream>
#include <vector>
#include <cstdint>
#include <algorithm>

// 定义 SM4 算法中的一些常量
const int SM4_BLOCK_SIZE = 16; // 分组大小，16字节
const int SM4_KEY_SIZE = 16;   // 密钥大小，16字节
const int SM4_NUM_ROUNDS = 32; // 轮数

// S-盒，用于非线性变换
const uint8_t Sbox[256] = {
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48 };

// 系统参数 FK
const uint32_t FK[4] = { 0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc };

// 固定参数 CK，用于密钥扩展
const uint32_t CK[32] = {
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279 };

// 32位循环左移
inline uint32_t rotl(uint32_t x, int n) {
    return (x << n) | (x >> (32 - n));
}

// 将4个字节（大端序）转换成一个32位无符号整数
uint32_t bytesToU32(const uint8_t* bytes) {
    return ((uint32_t)bytes[0] << 24) | ((uint32_t)bytes[1] << 16) | ((uint32_t)bytes[2] << 8) | (uint32_t)bytes[3];
}

// 将一个32位无符号整数转换成4个字节（大端序）
void u32ToBytes(uint32_t val, uint8_t* bytes) {
    bytes[0] = (val >> 24) & 0xFF;
    bytes[1] = (val >> 16) & 0xFF;
    bytes[2] = (val >> 8) & 0xFF;
    bytes[3] = val & 0xFF;
}

// 非线性变换 τ
uint32_t tau(uint32_t A) {
    uint8_t a[4];
    u32ToBytes(A, a);
    uint8_t b[4];
    b[0] = Sbox[a[0]];
    b[1] = Sbox[a[1]];
    b[2] = Sbox[a[2]];
    b[3] = Sbox[a[3]];
    return bytesToU32(b);
}

// 线性变换 L
uint32_t L_prime(uint32_t B) {
    return B ^ rotl(B, 2) ^ rotl(B, 10) ^ rotl(B, 18) ^ rotl(B, 24);
}

// 密钥扩展中的线性变换
uint32_t L_key(uint32_t B) {
    return B ^ rotl(B, 13) ^ rotl(B, 23);
}

// 轮函数 F
uint32_t F(uint32_t X0, uint32_t X1, uint32_t X2, uint32_t X3, uint32_t rk) {
    return X0 ^ L_prime(tau(X1 ^ X2 ^ X3 ^ rk));
}

// 密钥扩展算法
void sm4_key_schedule(const uint8_t* key, uint32_t* rk) {
    uint32_t MK[4];
    MK[0] = bytesToU32(key);
    MK[1] = bytesToU32(key + 4);
    MK[2] = bytesToU32(key + 8);
    MK[3] = bytesToU32(key + 12);

    uint32_t K[36];
    K[0] = MK[0] ^ FK[0];
    K[1] = MK[1] ^ FK[1];
    K[2] = MK[2] ^ FK[2];
    K[3] = MK[3] ^ FK[3];

    for (int i = 0; i < 32; ++i) {
        K[i + 4] = K[i] ^ L_key(tau(K[i + 1] ^ K[i + 2] ^ K[i + 3] ^ CK[i]));
        rk[i] = K[i + 4];
    }
}

// SM4 加密函数
void sm4_encrypt(const uint8_t* plaintext, const uint32_t* rk, uint8_t* ciphertext) {
    uint32_t X[36];
    X[0] = bytesToU32(plaintext);
    X[1] = bytesToU32(plaintext + 4);
    X[2] = bytesToU32(plaintext + 8);
    X[3] = bytesToU32(plaintext + 12);

    for (int i = 0; i < 32; ++i) {
        X[i + 4] = F(X[i], X[i + 1], X[i + 2], X[i + 3], rk[i]);
    }

    // 反序输出
    u32ToBytes(X[35], ciphertext);
    u32ToBytes(X[34], ciphertext + 4);
    u32ToBytes(X[33], ciphertext + 8);
    u32ToBytes(X[32], ciphertext + 12);
}

// SM4 解密函数 (解密密钥顺序与加密相反)
void sm4_decrypt(const uint8_t* ciphertext, const uint32_t* rk, uint8_t* plaintext) {
    uint32_t rk_dec[SM4_NUM_ROUNDS];
    for (int i = 0; i < SM4_NUM_ROUNDS; ++i) {
        rk_dec[i] = rk[SM4_NUM_ROUNDS - 1 - i];
    }
    sm4_encrypt(ciphertext, rk_dec, plaintext);
}

// 辅助函数：打印字节数组
void print_hex(const uint8_t* data, size_t len) {
    for (size_t i = 0; i < len; ++i) {
        printf("%02x ", data[i]);
    }
    printf("\n");
}

// 主函数，用于演示
int main() {
    // 示例密钥 (128位)
    uint8_t key[SM4_KEY_SIZE] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };

    // 示例明文 (128位)
    uint8_t plaintext[SM4_BLOCK_SIZE] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };

    uint8_t ciphertext[SM4_BLOCK_SIZE];
    uint8_t decrypted_text[SM4_BLOCK_SIZE];

    // 生成轮密钥
    uint32_t round_keys[SM4_NUM_ROUNDS];
    sm4_key_schedule(key, round_keys);

    std::cout << "原始明文: ";
    print_hex(plaintext, SM4_BLOCK_SIZE);

    // 加密
    sm4_encrypt(plaintext, round_keys, ciphertext);
    std::cout << "加密后的密文: ";
    print_hex(ciphertext, SM4_BLOCK_SIZE);

    // 解密
    sm4_decrypt(ciphertext, round_keys, decrypted_text);
    std::cout << "解密后的明文: ";
    print_hex(decrypted_text, SM4_BLOCK_SIZE);

    return 0;
}